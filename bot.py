import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton
)
import os

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –í—Ä–∞—á–∏ –∏ —Å—Å—ã–ª–∫–∏
doctors = {
    "üßë‚Äç‚öïÔ∏è –ê–Ω–≤–∞—Ä–±–µ–∫": "https://t.me/+998900619976",
    "üë®‚Äç‚öïÔ∏è –ó–æ–∫–∏—Ä–æ–≤": "https://t.me/+998901470208",
    "üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤": "https://t.me/doctor_sidorov",
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å Inline-–∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_inline():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π", callback_data="show_doctors")],
    ])

# –ú–µ–Ω—é —Å –≤—Ä–∞—á–∞–º–∏ + –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ (Inline)
def doctor_list():
    keyboard = [
        [InlineKeyboardButton(text=name, url=link)] for name, link in doctors.items()
    ]
    keyboard.append([InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="go_back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# Reply Keyboard (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞)
def main_menu_reply():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º –≤—Ä–∞—á–æ–º.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main_menu_reply()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Reply Keyboard –∫–Ω–æ–ø–æ–∫
@dp.message()
async def reply_keyboard_handler(message: Message):
    if message.text == "üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π":
        await message.answer("üßæ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π:", reply_markup=doctor_list())
    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        await message.answer(
            "‚ùì *–ü–æ–º–æ—â—å*\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –ø–∏—à–∏ —Å—é–¥–∞.",
            parse_mode="Markdown",
            reply_markup=main_menu_reply()
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.",
            reply_markup=main_menu_reply()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_callback(call: CallbackQuery):
    if call.data == "show_doctors":
        await call.message.edit_text("üßæ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π:", reply_markup=doctor_list())
    elif call.data == "go_back":
        await call.message.edit_text("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_inline())

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
