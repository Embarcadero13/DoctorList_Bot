import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import os

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –¢–≤–æ–π Telegram ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π)
ADMIN_ID = 123456789  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π Telegram user_id (—á–∏—Å–ª–æ)

doctors = {
    "üßë‚Äç‚öïÔ∏è –ê–Ω–≤–∞—Ä–±–µ–∫": "https://t.me/+998900619976",
    "üë®‚Äç‚öïÔ∏è –ó–æ–∫–∏—Ä–æ–≤": "https://t.me/+998901470208",
    "üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤": "https://t.me/doctor_sidorov",
}

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π", callback_data="show_doctors")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

def doctor_list():
    keyboard = [
        [InlineKeyboardButton(text=name, url=link)] for name, link in doctors.items()
    ]
    keyboard.append([InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="go_back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(CommandStart())
async def start_cmd(message: Message):
    try:
        await message.delete()
    except Exception:
        pass
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º –≤—Ä–∞—á–æ–º.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main_menu()
    )

@dp.callback_query()
async def handle_callback(call: CallbackQuery):
    if call.data == "show_doctors":
        await call.message.edit_text("üßæ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π:", reply_markup=doctor_list())
    elif call.data == "go_back":
        await call.message.edit_text("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    elif call.data == "help":
        await call.message.answer(
            "‚ùì –ü–æ–º–æ—â—å\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –ø–∏—à–∏ —Å—é–¥–∞."
        )
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å
        await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")

# –ü–µ—Ä–µ—Ö–≤–∞—Ç –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö –∞–¥–º–∏–Ω—É (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ /start)
@dp.message()
async def forward_user_message(message: Message):
    if message.text and not message.text.startswith("/start"):
        await bot.send_message(ADMIN_ID,
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.id}:\n{message.text}"
        )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
