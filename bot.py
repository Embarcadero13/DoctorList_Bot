import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
import os

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

ADMIN_ID = 5409762556  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π user_id —á–∏—Å–ª–æ–º

DB_PATH = "doctors.db"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS doctors (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                link TEXT NOT NULL
            )
        """)
        await db.commit()

# --- –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –∏–∑ –ë–î
async def get_doctors():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT id, name, link FROM doctors")
        rows = await cursor.fetchall()
        return rows

# --- –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞ –≤ –ë–î
async def add_doctor(name: str, link: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO doctors (name, link) VALUES (?, ?)", (name, link))
        await db.commit()

# --- –£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞ –ø–æ id
async def delete_doctor(doc_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM doctors WHERE id = ?", (doc_id,))
        await db.commit()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π", callback_data="show_doctors")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Ä–∞—á–µ–π (—Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞)
async def doctor_list_keyboard(is_admin=False):
    doctors = await get_doctors()
    keyboard = []
    for doc_id, name, link in doctors:
        row = [InlineKeyboardButton(text=name, url=link)]
        if is_admin:
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞ (callback_data —Å id –≤—Ä–∞—á–∞)
            row.append(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{doc_id}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="go_back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# --- –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º –≤—Ä–∞—á–æ–º.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main_menu()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_callback(call: CallbackQuery):
    user_id = call.from_user.id

    if call.data == "show_doctors":
        kb = await doctor_list_keyboard(is_admin=(user_id == ADMIN_ID))
        await call.message.edit_text("üßæ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π:", reply_markup=kb)
        await call.answer()
    elif call.data == "go_back":
        await call.message.edit_text("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        await call.answer()
    elif call.data == "help":
        await call.message.answer(
            "‚ùì –ü–æ–º–æ—â—å\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –ø–∏—à–∏ —Å—é–¥–∞."
        )
        await call.answer()
    elif call.data.startswith("delete_") and user_id == ADMIN_ID:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞
        doc_id = int(call.data.split("_")[1])
        await delete_doctor(doc_id)
        kb = await doctor_list_keyboard(is_admin=True)
        await call.message.edit_text("üßæ –í—Ä–∞—á —É–¥–∞–ª—ë–Ω. –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π:", reply_markup=kb)
        await call.answer("–í—Ä–∞—á —É–¥–∞–ª—ë–Ω")
    else:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

# --- –ê–¥–º–∏–Ω: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
# –û–∂–∏–¥–∞–µ–º –æ—Ç –∞–¥–º–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –≤—Ä–∞—á–∞
adding_name = set()
adding_link = dict()

@dp.message(Command("adddoctor"))
async def add_doctor_start(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ä–∞—á–∞:")
    adding_name.add(message.from_user.id)

@dp.message()
async def process_doctor_name(message: Message):
    if message.from_user.id in adding_name:
        adding_link[message.from_user.id] = None
        adding_name.remove(message.from_user.id)
        adding_link[message.from_user.id] = {'name': message.text}
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ä–∞—á–∞ (Telegram –∏–ª–∏ –≤–µ–±-—Å—Å—ã–ª–∫—É):")
        return

    if message.from_user.id in adding_link and adding_link[message.from_user.id]['name'] and adding_link[message.from_user.id].get('link') is None:
        name = adding_link[message.from_user.id]['name']
        link = message.text
        await add_doctor(name, link)
        await message.reply(f"‚úÖ –í—Ä–∞—á '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
        adding_link.pop(message.from_user.id)
        return

# --- –ü–µ—Ä–µ—Ö–≤–∞—Ç –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω—É (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ /start)
@dp.message()
async def forward_user_message(message: Message):
    if message.text and not message.text.startswith("/start") and message.from_user.id != ADMIN_ID:
        await bot.send_message(
            ADMIN_ID,
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.id}:\n{message.text}"
        )

async def main():
    await init_db()

    # –ï—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞ - –¥–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—Ä–∞—á–µ–π
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT COUNT(*) FROM doctors")
        count = (await cursor.fetchone())[0]
        if count == 0:
            await db.execute("INSERT INTO doctors (name, link) VALUES (?, ?)", ("üßë‚Äç‚öïÔ∏è –ê–Ω–≤–∞—Ä–±–µ–∫", "https://t.me/+998900619976"))
            await db.execute("INSERT INTO doctors (name, link) VALUES (?, ?)", ("üë®‚Äç‚öïÔ∏è –ó–æ–∫–∏—Ä–æ–≤", "https://t.me/+998901470208"))
            await db.execute("INSERT INTO doctors (name, link) VALUES (?, ?)", ("üë®‚Äç‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤", "https://t.me/doctor_sidorov"))
            await db.commit()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
